{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/color-convert/conversions.js","node_modules/color-convert/index.js","node_modules/color-convert/route.js","node_modules/color-name/index.js","node_modules/color-string/index.js","node_modules/color/index.js","node_modules/complex/lib/Complex.js","node_modules/simple-swizzle/index.js","node_modules/simple-swizzle/node_modules/is-arrayish/index.js","src/scripts/lib/angle-input.component.js","src/scripts/lib/app.js","src/scripts/lib/array-util.js","src/scripts/lib/complex-number-input.component.js","src/scripts/lib/composite-sinusoid.component.js","src/scripts/lib/composite-sinusoid.js","src/scripts/lib/number-input.component.js","src/scripts/lib/show-table.js","src/scripts/lib/start-editor.js","src/scripts/lib/term-list-editor.component.js","src/scripts/main.js"],"names":[],"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar v;\n\n\tif (max === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = (delta / max * 1000) / 10;\n\t}\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tv = ((max / 255) * 1000) / 10;\n\n\treturn [h, s, v];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\n// https://jsperf.com/object-keys-vs-for-in-with-closure/3\nvar models = Object.keys(conversions);\n\nfunction buildGraph() {\n\tvar graph = {};\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (!obj) {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tdark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tlight: function () {\n\t\treturn !this.dark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","\nvar Complex = function(real, im){\n\tthis.real = real;\n\tthis.im = im;\n};\n\nvar prototype = Complex.prototype = {\n\n\tfromRect: function(a, b){\n\t\tthis.real = a;\n\t\tthis.im = b;\n\t\treturn this;\n\t},\n\n\tfromPolar: function(r, phi){\n\t\tif (typeof r == 'string'){\n\t\t\tvar parts = r.split(' ');\n\t\t\tr = parts[0];\n\t\t\tphi = parts[1];\n\t\t}\n\t\treturn this.fromRect(\n\t\t\tr * Math.cos(phi),\n\t\t\tr * Math.sin(phi)\n\t\t);\n\t},\n\n\ttoPrecision: function(k){\n\t\treturn this.fromRect(\n\t\t\tthis.real.toPrecision(k),\n\t\t\tthis.im.toPrecision(k)\n\t\t);\n\t},\n\n\ttoFixed: function(k){\n\t\treturn this.fromRect(\n\t\t\tthis.real.toFixed(k),\n\t\t\tthis.im.toFixed(k)\n\t\t);\n\t},\n\n\tfinalize: function(){\n\t\tthis.fromRect = function(a, b){\n\t\t\treturn new Complex(a, b);\n\t\t};\n\t\tif (Object.defineProperty){\n\t\t\tObject.defineProperty(this, 'real', {writable: false, value: this.real});\n\t\t\tObject.defineProperty(this, 'im', {writable: false, value: this.im});\n\t\t}\n\t\treturn this;\n\t},\n\n\tmagnitude: function(){\n\t\tvar a = this.real, b = this.im;\n\t\treturn Math.sqrt(a * a + b * b);\n\t},\n\n\tangle: function(){\n\t\treturn Math.atan2(this.im, this.real);\n\t},\n\n\tconjugate: function(){\n\t\treturn this.fromRect(this.real, -this.im);\n\t},\n\n\tnegate: function(){\n\t\treturn this.fromRect(-this.real, -this.im);\n\t},\n\n\tmultiply: function(z){\n\t\tz = Complex.from(z);\n\t\tvar a = this.real, b = this.im;\n\t\treturn this.fromRect(\n\t\t\tz.real * a - z.im * b,\n\t\t\tb * z.real + z.im * a\n\t\t);\n\t},\n\n\tdivide: function(z){\n\t\tz = Complex.from(z);\n\t\tvar divident = (Math.pow(z.real, 2) + Math.pow(z.im, 2)),\n\t\t\ta = this.real, b = this.im;\n\t\treturn this.fromRect(\n\t\t\t(a * z.real + b * z.im) / divident,\n\t\t\t(b * z.real - a * z.im) / divident\n\t\t);\n\t},\n\n\tadd: function(z){\n\t\tz = Complex.from(z);\n\t\treturn this.fromRect(this.real + z.real, this.im + z.im);\n\t},\n\n\tsubtract: function(z){\n\t\tz = Complex.from(z);\n\t\treturn this.fromRect(this.real - z.real, this.im - z.im);\n\t},\n\n\tpow: function(z){\n\t\tz = Complex.from(z);\n\t\tvar result = z.multiply(this.clone().log()).exp(); // z^w = e^(w*log(z))\n\t\treturn this.fromRect(result.real, result.im);\n\t},\n\n\tsqrt: function(){\n\t\tvar abs = this.magnitude(),\n\t\t\tsgn = this.im < 0 ? -1 : 1;\n\t\treturn this.fromRect(\n\t\t\tMath.sqrt((abs + this.real) / 2),\n\t\t\tsgn * Math.sqrt((abs - this.real) / 2)\n\t\t);\n\t},\n\n\tlog: function(k){\n\t\tif (!k) k = 0;\n\t\treturn this.fromRect(\n\t\t\tMath.log(this.magnitude()),\n\t\t\tthis.angle() + k * 2 * Math.PI\n\t\t);\n\t},\n\n\texp: function(){\n\t\treturn this.fromPolar(\n\t\t\tMath.exp(this.real),\n\t\t\tthis.im\n\t\t);\n\t},\n\n\tsin: function(){\n\t\tvar a = this.real, b = this.im;\n\t\treturn this.fromRect(\n\t\t\tMath.sin(a) * cosh(b),\n\t\t\tMath.cos(a) * sinh(b)\n\t\t);\n\t},\n\n\tcos: function(){\n\t\tvar a = this.real, b = this.im;\n\t\treturn this.fromRect(\n\t\t\tMath.cos(a) * cosh(b),\n\t\t\tMath.sin(a) * sinh(b) * -1\n\t\t);\n\t},\n\n\ttan: function(){\n\t\tvar a = this.real, b = this.im,\n\t\t\tdivident = Math.cos(2 * a) + cosh(2 * b);\n\t\treturn this.fromRect(\n\t\t\tMath.sin(2 * a) / divident,\n\t\t\tsinh(2 * b) / divident\n\t\t);\n\t},\n\n\tsinh: function(){\n\t\tvar a = this.real, b = this.im;\n\t\treturn this.fromRect(\n\t\t\tsinh(a) * Math.cos(b),\n\t\t\tcosh(a) * Math.sin(b)\n\t\t);\n\t},\n\n\tcosh: function(){\n\t\tvar a = this.real, b = this.im;\n\t\treturn this.fromRect(\n\t\t\tcosh(a) * Math.cos(b),\n\t\t\tsinh(a) * Math.sin(b)\n\t\t);\n\t},\n\n\ttanh: function(){\n\t\tvar a = this.real, b = this.im,\n\t\t\tdivident = cosh(2 * a) + Math.cos(2 * b);\n\t\treturn this.fromRect(\n\t\t\tsinh(2 * a) / divident,\n\t\t\tMath.sin(2 * b) / divident\n\t\t);\n\t},\n\n\tclone: function(){\n\t\treturn new Complex(this.real, this.im);\n\t},\n\n\ttoString: function(polar){\n\t\tif (polar) return this.magnitude() + ' ' + this.angle();\n\n\t\tvar ret = '', a = this.real, b = this.im;\n\t\tif (a) ret += a;\n\t\tif (a && b || b < 0) ret += b < 0 ? '-' : '+';\n\t\tif (b){\n\t\t\tvar absIm = Math.abs(b);\n\t\t\tif (absIm != 1) ret += absIm;\n\t\t\tret += 'i';\n\t\t}\n\t\treturn ret || '0';\n\t},\n\n\tequals: function(z){\n\t\tz = Complex.from(z);\n\t\treturn (z.real == this.real && z.im == this.im);\n\t}\n\n};\n\nvar alias = {\n\tabs: 'magnitude',\n\targ: 'angle',\n\tphase: 'angle',\n\tconj: 'conjugate',\n\tmult: 'multiply',\n\tdev: 'divide',\n\tsub: 'subtract'\n};\n\nfor (var a in alias) prototype[a] = prototype[alias[a]];\n\nvar extend = {\n\n\tfrom: function(real, im){\n\t\tif (real instanceof Complex) return new Complex(real.real, real.im);\n\t\tvar type = typeof real;\n\t\tif (type == 'string'){\n\t\t\tif (real == 'i') real = '0+1i';\n\t\t\tvar match = real.match(/(\\d+)?([\\+\\-]\\d*)[ij]/);\n\t\t\tif (match){\n\t\t\t\treal = match[1];\n\t\t\t\tim = (match[2] == '+' || match[2] == '-') ? match[2] + '1' : match[2];\n\t\t\t}\n\t\t}\n\t\treal = +real;\n\t\tim = +im;\n\t\treturn new Complex(isNaN(real) ? 0 : real, isNaN(im) ? 0 : im);\n\t},\n\n\tfromPolar: function(r, phi){\n\t\treturn new Complex(1, 1).fromPolar(r, phi);\n\t},\n\n\ti: new Complex(0, 1).finalize(),\n\n\tone: new Complex(1, 0).finalize()\n\n};\n\nfor (var e in extend) Complex[e] = extend[e];\n\nvar sinh = function(x){\n\treturn (Math.pow(Math.E, x) - Math.pow(Math.E, -x)) / 2;\n};\n\nvar cosh = function(x){\n\treturn (Math.pow(Math.E, x) + Math.pow(Math.E, -x)) / 2;\n};\n\nmodule.exports = Complex;\n\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","'use strict';\n\nmodule.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","const template = `\n<div class=\"angle-input\">\n    <canvas ref=\"canvas\" \n        v-on:click=\"click\"\n        v-on:mousedown=\"down\"\n        v-on:mouseup=\"up\"\n        v-on:mouseenter=\"enter\"\n        v-on:mouseleave=\"leave\"\n        v-on:mousemove=\"move\"\n    ></canvas>\n</div>\n`;\n\nlet RADIUS = 60;\nlet PADDING = 4;\n\nlet component = Vue.component('fwAngleInput', {\n\n    props: ['value'],\n\n    template: template,\n\n    mounted: function () {\n        let canvas = this.$refs.canvas;\n        canvas.width = RADIUS * 2 + PADDING;\n        canvas.height = RADIUS * 2 + PADDING;\n        this.drawAngle();\n    },\n\n    watch: {\n        value: function (value) {\n            this.drawAngle();\n        }\n    },\n\n    data: function () {\n        return {\n            isDown: false\n        };\n    },\n\n    methods: {\n\n        click: function (event) {\n            let canvas = this.$refs.canvas;\n            let center = {\n                x: RADIUS + 0.5 * PADDING,\n                y: RADIUS + 0.5 * PADDING\n            };\n            let rect = canvas.getBoundingClientRect();\n            let targetPoint = {\n                x: event.clientX - rect.left - center.x,\n                y: event.clientY - rect.top - center.y\n            };\n            let newValue = Math.atan2(-targetPoint.y, targetPoint.x);\n            this.$emit('input', newValue);\n        },\n\n        down: function (event) {\n            this.isDown = true;\n        },\n\n        up: function (event) {\n            this.isDown = false;\n        },\n\n        move: function (event) {\n            if (this.isDown) {\n                this.click(event);\n            }\n        },\n\n        enter: function (event) {\n\n        },\n\n        leave: function (event) {\n            this.isDown = false;\n        },\n\n        drawAngle: function () {\n            let canvas = this.$refs.canvas;\n            let context = canvas.getContext('2d');\n\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, canvas.width, canvas.height);\n            let center = {\n                x: RADIUS + 0.5 * PADDING,\n                y: RADIUS + 0.5 * PADDING\n            };\n            context.strokeStyle = 'blue';\n            context.beginPath();\n            context.arc(center.x, center.y, RADIUS, 0, Math.PI * 2);\n            context.stroke();\n\n            let end = {\n                x: center.x + RADIUS * Math.cos(this.value),\n                y: center.y - RADIUS * Math.sin(this.value)\n            };\n            context.strokeStyle = 'red';\n            context.beginPath();\n            context.moveTo(center.x, center.y);\n            context.lineTo(end.x, end.y);\n            context.stroke();\n        }\n\n    }\n\n});\n\nmodule.exports = component;\n","const app = {\n    editor: require('./start-editor'),\n    table: require('./show-table')\n};\n\nmodule.exports = app;\n","const ArrayUtil = {\n    copy: copy\n};\n\nfunction copy(src, dst, depth) {\n    // TODO allow src and dst to have different lengths\n    for (let i in dst) {\n        let srcItem = src[i];\n        if (Array.isArray(srcItem) && depth > 0) {\n            copy(srcItem, dst[i], depth - 1);\n        }\n        else {\n            dst[i] = srcItem;\n        }\n    }\n}\n\nmodule.exports = ArrayUtil;","const Complex = require('complex');\n\nconst template = `\n<div class=\"complex-number-input\">\n    <fw-angle-input :value=\"angle\" @input=\"updateAngle\"></fw-angle-input>\n    <fw-number-input :value=\"magnitude\" @input=\"updateMagnitude\"/>\n</div>\n`;\n\nconst THRESHOLD = 0.000001;\n\nfunction differ(x, y) {\n    return isNaN(x) || isNaN(y) || Math.abs(x - y) > THRESHOLD;\n}\n\nconst component = Vue.component('fwComplexNumberInput', {\n    props: ['value'],\n\n    template: template,\n\n    data: function () {\n        return {};\n    },\n\n    computed: {\n        angle: function () {\n            return this.value ? this.value.angle() : 0;\n        },\n        magnitude: function () {\n            return this.value ? this.value.magnitude() : 0;\n        }\n    },\n\n    methods: {\n        updateAngle: function (angle) {\n            this.update(this.magnitude, angle);\n        },\n        updateMagnitude: function (magnitude) {\n            this.update(magnitude, this.angle);\n        },\n        update: function (magnitude, angle) {\n            let newValue = Complex.fromPolar(magnitude, angle);\n            if (differ(newValue.magnitude(), this.magnitude) || differ(newValue.angle(), this.angle)) {\n                this.$emit('input', newValue);\n            }\n        }\n    }\n});\n\nmodule.exports = component;\n","const CompositeSinusoid = require('./composite-sinusoid');\nconst Color = require('color');\n\nconst template = `\n<div class=\"composite-sinusoid\">\n    <canvas ref=\"canvas\"></canvas>\n</div>\n`;\n\nconst DEFAULT_RESOLUTION = 63;\nconst DEFAULT_CANVAS_SIZE = 256;\nconst DEFAULT_ZOOM_FACTOR = 0.6;\n\nlet component = Vue.component('fwCompositeSinusoid', {\n\n    /**\n     * terms : Array<{frequency: number, coefficient: Complex}>\n     * resolution : number\n     * canvasSize : number\n     * zoomFactor : number\n     */\n    props: ['terms', 'resolution', 'canvasSize', 'zoomFactor'],\n\n    template: template,\n\n    mounted: function () {\n        this.receiveTerms(this.terms);\n    },\n\n    watch: {\n        terms: function (terms) {\n            this.receiveTerms(terms);\n        }\n    },\n\n    methods: {\n\n        receiveTerms: function (terms) {\n            this.initializeCanvas(this.canvasSize || DEFAULT_CANVAS_SIZE);\n            if (terms) {\n                this.drawCompositeSinusoid(terms, this.resolution || DEFAULT_RESOLUTION);\n            }\n        },\n\n        initializeCanvas: function (size) {\n            let canvas = this.$refs.canvas;\n            canvas.width = size;\n            canvas.height = size;\n            let context = canvas.getContext('2d');\n            context.fillStyle = 'rgb(255, 255, 255)';\n            context.fillRect(0, 0, canvas.width, canvas.height);\n        },\n\n        drawCompositeSinusoid: function (terms, resolution) {\n            let sinusoid = new CompositeSinusoid();\n            sinusoid.resolution = resolution;\n            sinusoid.terms = terms;\n            let samples = sinusoid.samples();\n            let points = samples.map(sample => this.convert(sample));\n            this.drawPath(points, resolution);\n        },\n\n        drawPath: function (points, resolution) {\n            let hue = 0;\n            let hueDelta = 360 / resolution;\n            let color = this.createColor(hue);\n            let canvas = this.$refs.canvas;\n            let context = canvas.getContext('2d');\n            for (let i = 0; i < points.length; i++) {\n                let point = points[i];\n                let nextPoint = points[(i + 1) % points.length];\n                context.beginPath();\n                context.moveTo(point.x, point.y);\n                context.strokeStyle = color.rgb().string();\n                context.lineTo(nextPoint.x, nextPoint.y);\n                context.stroke();\n                context.closePath();\n                hue += hueDelta;\n                color = this.createColor(hue);\n            }\n        },\n\n        convert: function (z) {\n            // complex number (0, 0) corresponds to center of canvas\n            // center of canvas corresponds to complex number (0, 0)\n            let zoomFactor = this.zoomFactor || DEFAULT_ZOOM_FACTOR;\n            let canvas = this.$refs.canvas;\n            let canvasRadius = Math.min(canvas.width, canvas.height) / 2;\n            let scale = canvasRadius * zoomFactor;\n            let x = scale * z.real + canvasRadius;\n            let y = -scale * z.im + canvasRadius;\n            return {x: x, y: y};\n        },\n\n        createColor: function (hue) {\n            let color = Color({h: hue, s: 100, l: 50});\n            let lum = color.luminosity();\n            color = color.lighten(0.5 - lum * 0.9);\n            return color;\n        }\n\n    },\n\n});\n\nmodule.exports = component;","const Complex = require('complex');\n\nconst TAU = Math.PI * 2;\n\nclass Sinusoid {\n\n    constructor() {\n        this.coefficient = new Complex(1, 0);\n        this.frequency = 1;\n        this.resolution = 25;\n    }\n\n    samples() {\n        let list = [];\n        let resolution = Math.max(4, Math.round(this.resolution));\n        for (let increment = 0; increment < resolution; increment++) {\n            let angle = TAU * increment / resolution;\n            let power = new Complex(0, angle).multiply(this.frequency);\n            let point = power.exp().multiply(this.coefficient);\n            list.push(point);\n        }\n        return list;\n    }\n\n}\n\nclass CompositeSinusoid {\n\n    constructor() {\n        this.resolution = 25;\n        this.terms = [{\n            frequency: 1,\n            coefficient: Complex.from(1, 0)\n        }];\n    }\n\n    samples() {\n        let sinusoid = new Sinusoid();\n        sinusoid.resolution = this.resolution;\n        let list = [];\n        for (let index = 0; index < this.resolution; index++) {\n            list.push(new Complex(0, 0));\n        }\n        for (let index in this.terms) {\n            sinusoid.frequency = this.terms[index].frequency;\n            sinusoid.coefficient = this.terms[index].coefficient;\n            let samples = sinusoid.samples();\n            for (let sampleIndex in samples) {\n                list[sampleIndex] = list[sampleIndex].add(samples[sampleIndex]);\n            }\n        }\n        return list;\n    }\n\n}\n\nmodule.exports = CompositeSinusoid;","const template = `\n<div class=\"number-input\">\n    <input type=\"number\" v-model=\"numberString\" step=\"0.1\" min=\"0\" max=\"1000000\"/>\n</div>\n`;\n\nconst THRESHOLD = 0.000001;\n\nfunction differ(x, y) {\n    return Math.abs(x - y) > THRESHOLD;\n}\n\nconst component = Vue.component('fwNumberInput', {\n    props: ['value'],\n    template: template,\n    data: function () {\n        return {\n            numberString: String(this.value)\n        };\n    },\n    watch: {\n        numberString: function (numberString) {\n            let value = parseFloat(numberString);\n            if (differ(value, this.value)) {\n                this.$emit('input', value);\n            }\n        },\n        value: function (value, oldValue) {\n            if (differ(value, oldValue)) {\n                this.numberString = String(value);\n            }\n        }\n    }\n});\n\nmodule.exports = component;\n","const Complex = require('complex');\nconst ArrayUtil = require('./array-util');\n\nconst BALANCE = 1;\nconst CROSS_FREQUENCY = 0;\nconst MIN_RESOLUTION = 48;\nconst NUM_ROWS = 10;\nconst ROW_START = 1;\nconst ROW_STEP = 1;\nconst NUM_COLS = 10;\nconst COL_START = 1;\nconst COL_STEP = 1;\n\nconst template = `\n<div class=\"table\">\n    <div class=\"controls\">\n        <div>Cross Frequency: <input type=\"number\" v-model=\"crossFrequency\" step=\"1\" min=\"0\" max=\"100\" /></div>\n        <div>Balance: <input type=\"number\" v-model=\"balance\" step=\"0.1\" min=\"0\" max=\"100\" /></div>\n        <div>\n            Row \n            start <input type=\"number\" v-model=\"rowStart\" min=\"1\" step=\"1\" max=\"10000\" /> \n            step <input type=\"number\" v-model=\"rowStep\" min=\"0\" step=\"1\" max=\"10000\" />\n        </div>\n        <div>\n            Column\n            start <input type=\"number\" v-model=\"colStart\" min=\"1\" step=\"1\" max=\"10000\" /> \n            step <input type=\"number\" v-model=\"colStep\" min=\"0\" step=\"1\" max=\"10000\" />\n        </div>\n    </div>\n    <div class=\"row\" v-for=\"row in table\">\n        <div class=\"cell\" \n            v-for=\"cell in row\" \n            :title=\"cell[0].frequency + ':' + cell[1].frequency\"\n            :style=\"{ width: (100 / row.length) + '%' }\"\n            >\n            <fw-composite-sinusoid \n                :terms=\"cell\" \n                :resolution=\"minResolution * maxFrequency(cell)\" \n                :canvas-size=\"80\"\n                :zoom-factor=\"0.85 * zoomFactor(cell)\"\n            ></fw-composite-sinusoid>\n        </div>\n    </div>\n</div>\n`;\n\nfunction showTable(selector) {\n\n    return new Vue({\n\n        el: selector,\n\n        template: template,\n\n        data: function () {\n            return {\n                balance: BALANCE,\n                crossFrequency: CROSS_FREQUENCY,\n                minResolution: MIN_RESOLUTION,\n                numRows: NUM_ROWS,\n                numCols: NUM_COLS,\n                table: null,\n                rowStart: ROW_START,\n                rowStep: ROW_STEP,\n                colStart: COL_START,\n                colStep: COL_STEP\n            };\n        },\n\n        mounted: function () {\n            this.table = this.createTable();\n        },\n\n        watch: {\n\n            balance: function () {\n                this.updateTable();\n            },\n            crossFrequency: function () {\n                this.updateTable();\n            },\n            rowStart: function () {\n                this.updateTable();\n            },\n            rowStep: function () {\n                this.updateTable();\n            },\n            colStart: function () {\n                this.updateTable();\n            },\n            colStep: function () {\n                this.updateTable();\n            }\n\n        },\n\n        methods: {\n\n            updateTable: function () {\n                let table = this.createTable();\n                ArrayUtil.copy(table, this.table);\n            },\n\n            createTable: function () {\n                let rowStart = parseFloat(this.rowStart);\n                let rowStep = parseFloat(this.rowStep);\n                let table = [];\n                for (let i = 0; i < this.numRows; i++) {\n                    let rowIndex = rowStart + i * rowStep;\n                    let row = this.createRow(rowIndex);\n                    table.push(row);\n                }\n                return table;\n            },\n\n            createRow: function (rowIndex) {\n                let colStart = parseFloat(this.colStart);\n                let colStep = parseFloat(this.colStep);\n                let row = [];\n                for (let i = 0; i < this.numRows; i++) {\n                    let colIndex = colStart + i * colStep;\n                    let cell = this.createTerms(rowIndex, colIndex);\n                    row.push(cell);\n                }\n                return row;\n            },\n\n            createTerms: function (f1, f2) {\n                let terms = [];\n                let m1 = parseFloat(this.balance);\n                let m2 = 1 / m1;\n                terms.push(this.createTerm(f1, m1, 0));\n                terms.push(this.createTerm(f2, m2, 0));\n                let extra = parseInt(this.crossFrequency);\n                if (extra) {\n                    terms.push(this.createTerm(extra, 1, 0));\n                }\n                return terms;\n            },\n\n            createTerm: function (f, mag, angle) {\n                return {\n                    frequency: f,\n                    coefficient: Complex.fromPolar(mag, angle)\n                };\n            },\n\n            maxFrequency: function (cell) {\n                let frequencies = cell.map(term => term.frequency);\n                return Math.max.apply(Math, frequencies);\n            },\n\n            zoomFactor: function(cell) {\n                let magnitudes = cell.map(term => term.coefficient.magnitude());\n                let sum = 0;\n                magnitudes.forEach(magnitude => sum += magnitude);\n                return 1 / sum;\n            }\n\n        }\n\n    });\n}\n\nmodule.exports = showTable;\n","const Complex = require('complex');\nrequire('./composite-sinusoid.component');\nrequire('./angle-input.component');\nrequire('./number-input.component');\nrequire('./complex-number-input.component');\nrequire('./term-list-editor.component');\n\nconst template = `\n<div class=\"app\">\n    <fw-composite-sinusoid \n        :terms=\"exampleTerms\" \n        :resolution=\"256\" \n        :canvas-size=\"200\"\n        :zoom-factor=\"0.3\"\n    ></fw-composite-sinusoid>\n    <fw-term-list-editor v-model=\"exampleTerms\"></fw-term-list-editor>\n</div>\n`;\n\nfunction startEditor(selector) {\n\n    return new Vue({\n        el: selector,\n        template: template,\n        data: function () {\n            return {\n                exampleTerms: [\n                    {\n                        frequency: 1,\n                        coefficient: Complex.fromPolar(1, 0)\n                    }\n                ]\n            };\n        }\n    });\n\n}\n\nmodule.exports = startEditor;\n","const Complex = require('complex');\n\nconst template = `\n<div class=\"term-list-editor\">\n    \n    <h2>Terms</h2>\n    <ul class=\"term-list\">\n        <li v-for=\"term in terms\">\n            <div class=\"term\" :class=\"{selected: term === selectedTerm}\"\n                @click=\"selectTerm(term)\"\n            >\n                {{term.frequency}}.\n                {{term.coefficient}}\n            </div>\n        </li>\n    </ul>\n    <input class=\"frequency-input\" type=\"number\" v-model=\"frequency\" min=\"0\" step=\"1\"/>\n    <button @click=\"add\" v-bind:disabled=\"!canAdd\">New</button>\n    \n    <div class=\"term-editor\" v-if=\"hasSelectedTerm\">\n        <h2>Term {{selectedFrequency}}</h2>\n        <fw-complex-number-input :value=\"selectedCoefficient\" @input=\"updateCoefficient\"></fw-complex-number-input>\n        <button @click=\"remove\">Remove</button>\n    </div>\n</div>\n`;\n\nconst component = Vue.component('fwTermListEditor', {\n\n    /**\n     * value : Array<{frequency: number, coefficient: Complex}>\n     */\n    props: ['value'],\n\n    template: template,\n\n    data: function () {\n        return {\n            frequency: 0,\n            coefficient: null,\n            terms: this.value || [],\n            selectedFrequency: 0\n        };\n    },\n\n    computed: {\n\n        canAdd: function () {\n            let frequency = parseInt(this.frequency);\n            let exists = Boolean(frequency);\n            let found = (this.terms.findIndex(term => term.frequency === frequency) >= 0);\n            return exists && !found;\n        },\n\n        selectedTerm: function () {\n            return this.terms.find(term => {\n                return term.frequency === this.selectedFrequency;\n            });\n        },\n\n        selectedCoefficient: function () {\n            return this.selectedTerm ? this.selectedTerm.coefficient : null;\n        },\n\n        hasSelectedTerm: function () {\n            return Boolean(this.selectedTerm);\n        }\n\n    },\n\n    methods: {\n\n        add: function () {\n            let frequency = parseInt(this.frequency);\n            this.frequency = '';\n            let term = {\n                frequency: frequency,\n                coefficient: Complex.fromPolar(0, 0)\n            };\n            this.terms.push(term);\n            this.selectedFrequency = term.frequency;\n            this.updateTerms();\n        },\n\n        remove: function () {\n            let i = this.terms.indexOf(this.selectedTerm);\n            if (i >= 0) {\n                this.terms.splice(i, 1);\n            }\n            this.selectedFrequency = 0;\n            this.updateTerms();\n        },\n\n        updateCoefficient: function (coefficient) {\n            this.selectedTerm.coefficient = coefficient;\n            this.updateTerms();\n        },\n\n        selectTerm: function (term) {\n            this.selectedFrequency = term.frequency;\n        },\n\n        updateTerms: function () {\n            this.terms = this.terms.map(term => {\n                return {\n                    frequency: term.frequency,\n                    coefficient: new Complex(term.coefficient.real, term.coefficient.im)\n                }\n            });\n            this.$emit('input', this.terms);\n        }\n\n    }\n\n});\n\nmodule.exports = component;\n","window.app = require('./lib/app');\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}